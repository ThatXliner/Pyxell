
func bitNot(Int a) Int extern
func bitShift(Int a, Int b) Int extern
func bitAnd(Int a, Int b) Int extern
func bitXor(Int a, Int b) Int extern
func bitOr(Int a, Int b) Int extern

func write(String s) extern

func read() String extern
func readLine() String extern
func readInt() Int extern
func readRat() Rat extern
func readFloat() Float extern
func readChar() Char extern


func min<T>(T a, T b) T def
    return a < b ? a : b

func max<T>(T a, T b) T def
    return b < a ? a : b

func clamp<T>(T x, T a, T b) T def
    return min(max(x, a), b)

func abs<T>(T x) T def
    return x >= 0 ? x : -x

func sign<T>(T x) T def
    return x > 0 ? 1 : x < 0 ? -1 : 0


func String_all(String s, Char->Bool f) Bool def
    for c in s do
        if not f(c) do
            return false
    return true

func String_any(String s, Char->Bool f) Bool def
    for c in s do
        if f(c) do
            return true
    return false

func String_filter(String s, Char->Bool f) String def
    return [c for c in s if f(c)].join()

func String_map(String s, Char->Char f) String def
    return [f(c) for c in s].join()

func String_fold<B>(String s, Char->B->B f, B r) B def
    for c in s do
        r = f(c, r)
    return r

func String_reduce(String s, Char->Char->Char f) Char def
    Char r
    b = true
    for c in s do
        if b do
            r = c
            b = false
        else do
            r = f(c, r)
    return r


func Array_all<A>([A] a, A->Bool f: _) Bool def
    for x in a do
        if not f(x) do
            return false
    return true

func Array_any<A>([A] a, A->Bool f: _) Bool def
    for x in a do
        if f(x) do
            return true
    return false

func Array_filter<A>([A] a, A->Bool f) [A] def
    return [x for x in a if f(x)]

func Array_map<A,B>([A] a, A->B f) [B] def
    return [f(x) for x in a]

func Array_fold<A,B>([A] a, A->B->B f, B r) B def
    for x in a do
        r = f(x, r)
    return r

func Array_reduce<A>([A] a, A->A->A f) A def
    A r
    b = true
    for x in a do
        if b do
            r = x
            b = false
        else do
            r = f(x, r)
    return r


func Set_all<A>({A} a, A->Bool f: _) Bool def
    for x in a do
        if not f(x) do
            return false
    return true

func Set_any<A>({A} a, A->Bool f: _) Bool def
    for x in a do
        if f(x) do
            return true
    return false

func Set_filter<A>({A} a, A->Bool f) {A} def
    return {x for x in a if f(x)}

func Set_map<A,B>({A} a, A->B f) {B} def
    return {f(x) for x in a}

func Set_fold<A,B>({A} a, A->B->B f, B r) B def
    for x in a do
        r = f(x, r)
    return r

func Set_reduce<A>({A} a, A->A->A f) A def
    A r
    b = true
    for x in a do
        if b do
            r = x
            b = false
        else do
            r = f(x, r)
    return r


func Dict_all<A,B>({A:B} a, A*B->Bool f) Bool def
    for x in a do
        if not f(x) do
            return false
    return true

func Dict_any<A,B>({A:B} a, A*B->Bool f) Bool def
    for x in a do
        if f(x) do
            return true
    return false

func Dict_filter<A,B>({A:B} a, A*B->Bool f) {A:B} def
    return {x.a: x.b for x in a if f(x)}

func Dict_map<A,B,C,D>({A:B} a, A*B->C*D f) {C:D} def
    {C:D} r
    for x in a do
        y = f(x)
        r[y.a] = y.b
    return r

func Dict_fold<A,B,C>({A:B} a, A*B->C->C f, C r) C def
    for x in a do
        r = f(x, r)
    return r

func Dict_reduce<A,B>({A:B} a, A*B->A*B->A*B f) A*B def
    A*B r
    b = true
    for x in a do
        if b do
            r = x
            b = false
        else do
            r = f(x, r)
    return r
