
func write(String s) extern

func read() String extern
func readLine() String extern
func readInt() Int extern
func readFloat() Float extern
func readChar() Char extern


func min<T>(T a, T b) T def
    return a < b ? a : b

func max<T>(T a, T b) T def
    return b < a ? a : b

func clamp<T>(T x, T a, T b) T def
    return min(max(x, a), b)

func abs<T>(T x) T def
    return x >= 0 ? x : -x

func sign<T>(T x) T def
    return x > 0 ? 1 : x < 0 ? -1 : 0


func Array_all<A>([A] a, A->Bool f: _) Bool def
    for x in a do
        if not f(x) do
            return false
    return true

func Array_any<A>([A] a, A->Bool f: _) Bool def
    for x in a do
        if f(x) do
            return true
    return false

func Array_filter<A>([A] a, A->Bool f) [A] def
    return [x for x in a if f(x)]

func Array_map<A,B>([A] a, A->B f) [B] def
    return [f(x) for x in a]

func Array_reduce<A,B>([A] a, A->B->B f, B r) B def
    for x in a do
        r = f(x, r)
    return r


func String_all(String s, Char->Bool f) Bool def
    for c in s do
        if not f(c) do
            return false
    return true

func String_any(String s, Char->Bool f) Bool def
    for c in s do
        if f(c) do
            return true
    return false

func String_filter(String s, Char->Bool f) String def
    return [c for c in s if f(c)]._asString()

func String_map(String s, Char->Char f) String def
    return [f(c) for c in s]._asString()

func String_reduce<B>(String s, Char->B->B f, B r) B def
    for c in s do
        r = f(c, r)
    return r


func CharArray_join([Char] array, String sep: "") String def
    if sep.length == 0 do
        return array._asString()
    m = sep.length
    n = array.length
    r = [' '] * ((m+1) * (n-1) + 1)
    p = 0
    for i in 0...n do
        r[p] = array[i]
        p += 1
        if i < n-1 do
            for c in sep do
                r[p] = c
                p += 1
    return r._asString()

func StringArray_join([String] array, String sep: "") String def
    m = sep.length
    n = array.length
    l = 0
    for s in array do
        l += s.length
    r = [' '] * (l + m*(n-1))
    p = 0
    for i in 0...n do
        for c in array[i] do
            r[p] = c
            p += 1
        if i < n-1 do
            for c in sep do
                r[p] = c
                p += 1
    return r._asString()
