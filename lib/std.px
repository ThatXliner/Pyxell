
func ord(Char c) Int extern
func chr(Int c) Char extern

func write(String s) extern
func writeLine(String s) extern
func writeInt(Int s) extern
func writeFloat(Float s) extern
func writeBool(Bool s) extern
func writeChar(Char s) extern

func read() String extern
func readLine() String extern
func readInt() Int extern
func readChar() Char extern


func min<T>(T a, T b) T def
    return a < b ? a : b

func max<T>(T a, T b) T def
    return b < a ? a : b

func clamp<T>(T x, T a, T b) T def
    return min(max(x, a), b)

func abs<T>(T x) T def
    return x >= 0 ? x : -x

func sign<T>(T x) Int def
    return x > 0 ? 1 : x < 0 ? -1 : 0


func all<A>(A->Bool f, [A] a) Bool def
    for x in a do
        if not f(x) do
            return false
    return true

func any<A>(A->Bool f, [A] a) Bool def
    for x in a do
        if f(x) do
            return true
    return false

func filter<A>(A->Bool f, [A] a) [A] def
    return [x for x in a if f(x)]

func map<A,B>(A->B f, [A] a) [B] def
    return [f(x) for x in a]

func reduce<A,B>(A->B->A f, A r, [B] b) A def
    for x in b do
        r = f(r, x)
    return r


func Int_pow(Int b, Int e) Int def
    if e < 0 do
        return 0
    r = 1
    while e > 0 do
        if e % 2 > 0 do
            r *= b
        b *= b
        e >>= 1
    return r

func Float_pow(Float b, Float e) Float extern


func CharArray_asString([Char] a) String extern
func String_toArray(String s) [Char] extern

func CharArray_join([Char] array, String sep: "") String def
    if sep.length == 0 do
        return CharArray_asString(CharArray_asString(array).toArray())  -- copy the array
    m = sep.length
    n = array.length
    r = [' '] * ((m+1) * (n-1) + 1)
    p = 0
    for i in 0...n do
        r[p] = array[i]
        p += 1
        if i < n-1 do
            for c in sep do
                r[p] = c
                p += 1
    return CharArray_asString(r)

func StringArray_join([String] array, String sep: "") String def
    m = sep.length
    n = array.length
    l = 0
    for s in array do
        l += s.length
    r = [' '] * (l + m*(n-1))
    p = 0
    for i in 0...n do
        for c in array[i] do
            r[p] = c
            p += 1
        if i < n-1 do
            for c in sep do
                r[p] = c
                p += 1
    return CharArray_asString(r)


func Int_toString(Int n) String extern
func Float_toString(Float f) String extern

func Bool_toString(Bool b) String def
    return b ? "true" : "false"

func Char_toString(Char c) String def
    return CharArray_asString([c])

func String_toString(String s) String def
    return s


func String_toInt(String s) Int extern
func String_toFloat(String s) Float extern


func Int_toFloat(Int n) Float extern

func Float_toInt(Float f) Int extern


func Bool_toInt(Bool b) Int def
    return b ? 1 : 0

func Bool_toFloat(Bool b) Float def
    return b ? 1.0 : 0.0

func Char_toInt(Char c) Int def
    return ord(c) - 48

func Char_toFloat(Char c) Float def
    return ord(c) - 48.0
