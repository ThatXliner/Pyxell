
func bitNot(x: Int): Int extern
func bitShift(x: Int, y: Int): Int extern
func bitAnd(x: Int, y: Int): Int extern
func bitXor(x: Int, y: Int): Int extern
func bitOr(x: Int, y: Int): Int extern

func write(s: String) extern

func read(): String extern
func readLine(): String extern
func readInt(): Int extern
func readRat(): Rat extern
func readFloat(): Float extern
func readChar(): Char extern


func min<T>(x: T, y: T): T def
    return x < y ? x : y

func max<T>(x: T, y: T): T def
    return y < x ? x : y

func clamp<T>(x: T, a: T, b: T): T def
    return min(max(x, a), b)

func abs<T>(x: T): T def
    return x >= 0 ? x : -x

func sign<T>(x: T): T def
    return x > 0 ? 1 : x < 0 ? -1 : 0


func String_all(s: String, f: Char->Bool): Bool def
    for c in s do
        if not f(c) do
            return false
    return true

func String_any(s: String, f: Char->Bool): Bool def
    for c in s do
        if f(c) do
            return true
    return false

func String_filter(s: String, f: Char->Bool): String def
    return [c for c in s if f(c)].join()

func String_map(s: String, f: Char->Char): String def
    return [f(c) for c in s].join()

func String_fold<B>(s: String, f: Char->B->B, r: B): B def
    for c in s do
        r = f(c, r)
    return r

func String_reduce(s: String, f: Char->Char->Char): Char def
    r: Char
    b = true
    for c in s do
        if b do
            r = c
            b = false
        else do
            r = f(c, r)
    return r


func Array_all<A>(a: [A], f: A->Bool = _): Bool def
    for x in a do
        if not f(x) do
            return false
    return true

func Array_any<A>(a: [A], f: A->Bool = _): Bool def
    for x in a do
        if f(x) do
            return true
    return false

func Array_filter<A>(a: [A], f: A->Bool): [A] def
    return [x for x in a if f(x)]

func Array_map<A,B>(a: [A], f: A->B): [B] def
    return [f(x) for x in a]

func Array_fold<A,B>(a: [A], f: A->B->B, r: B): B def
    for x in a do
        r = f(x, r)
    return r

func Array_reduce<A>(a: [A], f: A->A->A): A def
    r: A
    b = true
    for x in a do
        if b do
            r = x
            b = false
        else do
            r = f(x, r)
    return r


func Set_all<A>(a: {A}, f: A->Bool = _): Bool def
    for x in a do
        if not f(x) do
            return false
    return true

func Set_any<A>(a: {A}, f: A->Bool = _): Bool def
    for x in a do
        if f(x) do
            return true
    return false

func Set_filter<A>(a: {A}, f: A->Bool): {A} def
    return {x for x in a if f(x)}

func Set_map<A,B>(a: {A}, f: A->B): {B} def
    return {f(x) for x in a}

func Set_fold<A,B>(a: {A}, f: A->B->B, r: B): B def
    for x in a do
        r = f(x, r)
    return r

func Set_reduce<A>(a: {A}, f: A->A->A): A def
    r: A
    b = true
    for x in a do
        if b do
            r = x
            b = false
        else do
            r = f(x, r)
    return r


func Dict_all<A,B>(a: {A:B}, f: A*B->Bool): Bool def
    for x in a do
        if not f(x) do
            return false
    return true

func Dict_any<A,B>(a: {A:B}, f: A*B->Bool): Bool def
    for x in a do
        if f(x) do
            return true
    return false

func Dict_filter<A,B>(a: {A:B}, f: A*B->Bool): {A:B} def
    return {x.a: x.b for x in a if f(x)}

func Dict_map<A,B,C,D>(a: {A:B}, f: A*B->C*D): {C:D} def
    r: {C:D}
    for x in a do
        y = f(x)
        r[y.a] = y.b
    return r

func Dict_fold<A,B,C>(a: {A:B}, f: A*B->C->C, r: C): C def
    for x in a do
        r = f(x, r)
    return r

func Dict_reduce<A,B>(a: {A:B}, f: A*B->A*B->A*B): A*B def
    r: A*B
    b = true
    for x in a do
        if b do
            r = x
            b = false
        else do
            r = f(x, r)
    return r
