# Generated from Pyxell.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\36")
        buf.write("\u00a9\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\13\3")
        buf.write("\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\33\6\33\u008f")
        buf.write("\n\33\r\33\16\33\u0090\3\34\3\34\7\34\u0095\n\34\f\34")
        buf.write("\16\34\u0098\13\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37")
        buf.write("\5\37\u00a1\n\37\3 \6 \u00a4\n \r \16 \u00a5\3 \3 \2\2")
        buf.write("!\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\2;\2=\2?\36\3\2\6\3\2\62;\5")
        buf.write("\2C\\aac|\4\2))aa\5\2\13\f\17\17\"\"\2\u00aa\2\3\3\2\2")
        buf.write("\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2")
        buf.write("\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25")
        buf.write("\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3")
        buf.write("\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2")
        buf.write("\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2")
        buf.write("\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\2")
        buf.write("?\3\2\2\2\3A\3\2\2\2\5C\3\2\2\2\7H\3\2\2\2\tN\3\2\2\2")
        buf.write("\13P\3\2\2\2\rS\3\2\2\2\17X\3\2\2\2\21]\3\2\2\2\23`\3")
        buf.write("\2\2\2\25b\3\2\2\2\27d\3\2\2\2\31f\3\2\2\2\33h\3\2\2\2")
        buf.write("\35j\3\2\2\2\37l\3\2\2\2!n\3\2\2\2#p\3\2\2\2%r\3\2\2\2")
        buf.write("\'u\3\2\2\2)x\3\2\2\2+z\3\2\2\2-}\3\2\2\2/\177\3\2\2\2")
        buf.write("\61\u0082\3\2\2\2\63\u0087\3\2\2\2\65\u008e\3\2\2\2\67")
        buf.write("\u0092\3\2\2\29\u0099\3\2\2\2;\u009b\3\2\2\2=\u00a0\3")
        buf.write("\2\2\2?\u00a3\3\2\2\2AB\7=\2\2B\4\3\2\2\2CD\7u\2\2DE\7")
        buf.write("m\2\2EF\7k\2\2FG\7r\2\2G\6\3\2\2\2HI\7r\2\2IJ\7t\2\2J")
        buf.write("K\7k\2\2KL\7p\2\2LM\7v\2\2M\b\3\2\2\2NO\7?\2\2O\n\3\2")
        buf.write("\2\2PQ\7k\2\2QR\7h\2\2R\f\3\2\2\2ST\7g\2\2TU\7n\2\2UV")
        buf.write("\7k\2\2VW\7h\2\2W\16\3\2\2\2XY\7g\2\2YZ\7n\2\2Z[\7u\2")
        buf.write("\2[\\\7g\2\2\\\20\3\2\2\2]^\7f\2\2^_\7q\2\2_\22\3\2\2")
        buf.write("\2`a\7}\2\2a\24\3\2\2\2bc\7\177\2\2c\26\3\2\2\2de\7*\2")
        buf.write("\2e\30\3\2\2\2fg\7+\2\2g\32\3\2\2\2hi\7-\2\2i\34\3\2\2")
        buf.write("\2jk\7/\2\2k\36\3\2\2\2lm\7,\2\2m \3\2\2\2no\7\61\2\2")
        buf.write("o\"\3\2\2\2pq\7\'\2\2q$\3\2\2\2rs\7?\2\2st\7?\2\2t&\3")
        buf.write("\2\2\2uv\7#\2\2vw\7?\2\2w(\3\2\2\2xy\7>\2\2y*\3\2\2\2")
        buf.write("z{\7>\2\2{|\7?\2\2|,\3\2\2\2}~\7@\2\2~.\3\2\2\2\177\u0080")
        buf.write("\7@\2\2\u0080\u0081\7?\2\2\u0081\60\3\2\2\2\u0082\u0083")
        buf.write("\7v\2\2\u0083\u0084\7t\2\2\u0084\u0085\7w\2\2\u0085\u0086")
        buf.write("\7g\2\2\u0086\62\3\2\2\2\u0087\u0088\7h\2\2\u0088\u0089")
        buf.write("\7c\2\2\u0089\u008a\7n\2\2\u008a\u008b\7u\2\2\u008b\u008c")
        buf.write("\7g\2\2\u008c\64\3\2\2\2\u008d\u008f\59\35\2\u008e\u008d")
        buf.write("\3\2\2\2\u008f\u0090\3\2\2\2\u0090\u008e\3\2\2\2\u0090")
        buf.write("\u0091\3\2\2\2\u0091\66\3\2\2\2\u0092\u0096\5;\36\2\u0093")
        buf.write("\u0095\5=\37\2\u0094\u0093\3\2\2\2\u0095\u0098\3\2\2\2")
        buf.write("\u0096\u0094\3\2\2\2\u0096\u0097\3\2\2\2\u00978\3\2\2")
        buf.write("\2\u0098\u0096\3\2\2\2\u0099\u009a\t\2\2\2\u009a:\3\2")
        buf.write("\2\2\u009b\u009c\t\3\2\2\u009c<\3\2\2\2\u009d\u00a1\5")
        buf.write(";\36\2\u009e\u00a1\59\35\2\u009f\u00a1\t\4\2\2\u00a0\u009d")
        buf.write("\3\2\2\2\u00a0\u009e\3\2\2\2\u00a0\u009f\3\2\2\2\u00a1")
        buf.write(">\3\2\2\2\u00a2\u00a4\t\5\2\2\u00a3\u00a2\3\2\2\2\u00a4")
        buf.write("\u00a5\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2")
        buf.write("\u00a6\u00a7\3\2\2\2\u00a7\u00a8\b \2\2\u00a8@\3\2\2\2")
        buf.write("\7\2\u0090\u0096\u00a0\u00a5\3\b\2\2")
        return buf.getvalue()


class PyxellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    INT = 26
    ID = 27
    WS = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'skip'", "'print'", "'='", "'if'", "'elif'", "'else'", 
            "'do'", "'{'", "'}'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'true'", 
            "'false'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "INT", "ID", 
                  "DIGIT", "ID_START", "ID_CONT", "WS" ]

    grammarFileName = "Pyxell.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


