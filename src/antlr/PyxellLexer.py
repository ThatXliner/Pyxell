# Generated from Pyxell.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2-")
        buf.write("\u00f8\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t")
        buf.write("\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3")
        buf.write("\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34")
        buf.write("\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3!\3\"\3\"\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3&\3")
        buf.write("&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3)\6)\u00da")
        buf.write("\n)\r)\16)\u00db\3*\3*\7*\u00e0\n*\f*\16*\u00e3\13*\3")
        buf.write("+\3+\3,\3,\3-\3-\3.\3.\3.\5.\u00ee\n.\3/\6/\u00f1\n/\r")
        buf.write("/\16/\u00f2\3/\3/\3\60\3\60\2\2\61\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U\2W\2Y\2[\2]")
        buf.write(",_-\3\2\7\3\2\62;\3\2c|\5\2C\\aac|\4\2))aa\5\2\13\f\17")
        buf.write("\17\"\"\2\u00f8\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2")
        buf.write("\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2")
        buf.write("\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2")
        buf.write("\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3")
        buf.write("\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q")
        buf.write("\3\2\2\2\2S\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5")
        buf.write("c\3\2\2\2\7h\3\2\2\2\tn\3\2\2\2\13p\3\2\2\2\rr\3\2\2\2")
        buf.write("\17t\3\2\2\2\21v\3\2\2\2\23x\3\2\2\2\25z\3\2\2\2\27|\3")
        buf.write("\2\2\2\31\177\3\2\2\2\33\u0082\3\2\2\2\35\u0084\3\2\2")
        buf.write("\2\37\u0086\3\2\2\2!\u0088\3\2\2\2#\u008a\3\2\2\2%\u008d")
        buf.write("\3\2\2\2\'\u0092\3\2\2\2)\u0097\3\2\2\2+\u009d\3\2\2\2")
        buf.write("-\u00a3\3\2\2\2/\u00a6\3\2\2\2\61\u00a8\3\2\2\2\63\u00aa")
        buf.write("\3\2\2\2\65\u00ac\3\2\2\2\67\u00ae\3\2\2\29\u00b0\3\2")
        buf.write("\2\2;\u00b2\3\2\2\2=\u00b5\3\2\2\2?\u00b8\3\2\2\2A\u00ba")
        buf.write("\3\2\2\2C\u00bd\3\2\2\2E\u00bf\3\2\2\2G\u00c2\3\2\2\2")
        buf.write("I\u00c6\3\2\2\2K\u00ca\3\2\2\2M\u00cd\3\2\2\2O\u00d2\3")
        buf.write("\2\2\2Q\u00d9\3\2\2\2S\u00dd\3\2\2\2U\u00e4\3\2\2\2W\u00e6")
        buf.write("\3\2\2\2Y\u00e8\3\2\2\2[\u00ed\3\2\2\2]\u00f0\3\2\2\2")
        buf.write("_\u00f6\3\2\2\2ab\7=\2\2b\4\3\2\2\2cd\7u\2\2de\7m\2\2")
        buf.write("ef\7k\2\2fg\7r\2\2g\6\3\2\2\2hi\7r\2\2ij\7t\2\2jk\7k\2")
        buf.write("\2kl\7p\2\2lm\7v\2\2m\b\3\2\2\2no\7?\2\2o\n\3\2\2\2pq")
        buf.write("\7`\2\2q\f\3\2\2\2rs\7,\2\2s\16\3\2\2\2tu\7\61\2\2u\20")
        buf.write("\3\2\2\2vw\7\'\2\2w\22\3\2\2\2xy\7-\2\2y\24\3\2\2\2z{")
        buf.write("\7/\2\2{\26\3\2\2\2|}\7>\2\2}~\7>\2\2~\30\3\2\2\2\177")
        buf.write("\u0080\7@\2\2\u0080\u0081\7@\2\2\u0081\32\3\2\2\2\u0082")
        buf.write("\u0083\7(\2\2\u0083\34\3\2\2\2\u0084\u0085\7&\2\2\u0085")
        buf.write("\36\3\2\2\2\u0086\u0087\7~\2\2\u0087 \3\2\2\2\u0088\u0089")
        buf.write("\7.\2\2\u0089\"\3\2\2\2\u008a\u008b\7k\2\2\u008b\u008c")
        buf.write("\7h\2\2\u008c$\3\2\2\2\u008d\u008e\7g\2\2\u008e\u008f")
        buf.write("\7n\2\2\u008f\u0090\7k\2\2\u0090\u0091\7h\2\2\u0091&\3")
        buf.write("\2\2\2\u0092\u0093\7g\2\2\u0093\u0094\7n\2\2\u0094\u0095")
        buf.write("\7u\2\2\u0095\u0096\7g\2\2\u0096(\3\2\2\2\u0097\u0098")
        buf.write("\7y\2\2\u0098\u0099\7j\2\2\u0099\u009a\7k\2\2\u009a\u009b")
        buf.write("\7n\2\2\u009b\u009c\7g\2\2\u009c*\3\2\2\2\u009d\u009e")
        buf.write("\7w\2\2\u009e\u009f\7p\2\2\u009f\u00a0\7v\2\2\u00a0\u00a1")
        buf.write("\7k\2\2\u00a1\u00a2\7n\2\2\u00a2,\3\2\2\2\u00a3\u00a4")
        buf.write("\7f\2\2\u00a4\u00a5\7q\2\2\u00a5.\3\2\2\2\u00a6\u00a7")
        buf.write("\7}\2\2\u00a7\60\3\2\2\2\u00a8\u00a9\7\177\2\2\u00a9\62")
        buf.write("\3\2\2\2\u00aa\u00ab\7*\2\2\u00ab\64\3\2\2\2\u00ac\u00ad")
        buf.write("\7+\2\2\u00ad\66\3\2\2\2\u00ae\u00af\7\60\2\2\u00af8\3")
        buf.write("\2\2\2\u00b0\u00b1\7\u0080\2\2\u00b1:\3\2\2\2\u00b2\u00b3")
        buf.write("\7?\2\2\u00b3\u00b4\7?\2\2\u00b4<\3\2\2\2\u00b5\u00b6")
        buf.write("\7#\2\2\u00b6\u00b7\7?\2\2\u00b7>\3\2\2\2\u00b8\u00b9")
        buf.write("\7>\2\2\u00b9@\3\2\2\2\u00ba\u00bb\7>\2\2\u00bb\u00bc")
        buf.write("\7?\2\2\u00bcB\3\2\2\2\u00bd\u00be\7@\2\2\u00beD\3\2\2")
        buf.write("\2\u00bf\u00c0\7@\2\2\u00c0\u00c1\7?\2\2\u00c1F\3\2\2")
        buf.write("\2\u00c2\u00c3\7p\2\2\u00c3\u00c4\7q\2\2\u00c4\u00c5\7")
        buf.write("v\2\2\u00c5H\3\2\2\2\u00c6\u00c7\7c\2\2\u00c7\u00c8\7")
        buf.write("p\2\2\u00c8\u00c9\7f\2\2\u00c9J\3\2\2\2\u00ca\u00cb\7")
        buf.write("q\2\2\u00cb\u00cc\7t\2\2\u00ccL\3\2\2\2\u00cd\u00ce\7")
        buf.write("v\2\2\u00ce\u00cf\7t\2\2\u00cf\u00d0\7w\2\2\u00d0\u00d1")
        buf.write("\7g\2\2\u00d1N\3\2\2\2\u00d2\u00d3\7h\2\2\u00d3\u00d4")
        buf.write("\7c\2\2\u00d4\u00d5\7n\2\2\u00d5\u00d6\7u\2\2\u00d6\u00d7")
        buf.write("\7g\2\2\u00d7P\3\2\2\2\u00d8\u00da\5U+\2\u00d9\u00d8\3")
        buf.write("\2\2\2\u00da\u00db\3\2\2\2\u00db\u00d9\3\2\2\2\u00db\u00dc")
        buf.write("\3\2\2\2\u00dcR\3\2\2\2\u00dd\u00e1\5Y-\2\u00de\u00e0")
        buf.write("\5[.\2\u00df\u00de\3\2\2\2\u00e0\u00e3\3\2\2\2\u00e1\u00df")
        buf.write("\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2T\3\2\2\2\u00e3\u00e1")
        buf.write("\3\2\2\2\u00e4\u00e5\t\2\2\2\u00e5V\3\2\2\2\u00e6\u00e7")
        buf.write("\t\3\2\2\u00e7X\3\2\2\2\u00e8\u00e9\t\4\2\2\u00e9Z\3\2")
        buf.write("\2\2\u00ea\u00ee\5Y-\2\u00eb\u00ee\5U+\2\u00ec\u00ee\t")
        buf.write("\5\2\2\u00ed\u00ea\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ed\u00ec")
        buf.write("\3\2\2\2\u00ee\\\3\2\2\2\u00ef\u00f1\t\6\2\2\u00f0\u00ef")
        buf.write("\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2")
        buf.write("\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\b/\2\2")
        buf.write("\u00f5^\3\2\2\2\u00f6\u00f7\13\2\2\2\u00f7`\3\2\2\2\7")
        buf.write("\2\u00db\u00e1\u00ed\u00f2\3\b\2\2")
        return buf.getvalue()


class PyxellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    INT = 40
    ID = 41
    WS = 42
    ERR = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'skip'", "'print'", "'='", "'^'", "'*'", "'/'", "'%'", 
            "'+'", "'-'", "'<<'", "'>>'", "'&'", "'$'", "'|'", "','", "'if'", 
            "'elif'", "'else'", "'while'", "'until'", "'do'", "'{'", "'}'", 
            "'('", "')'", "'.'", "'~'", "'=='", "'!='", "'<'", "'<='", "'>'", 
            "'>='", "'not'", "'and'", "'or'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "ID", "WS", "ERR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "INT", "ID", "DIGIT", "LETTER", "ID_START", "ID_CONT", 
                  "WS", "ERR" ]

    grammarFileName = "Pyxell.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


