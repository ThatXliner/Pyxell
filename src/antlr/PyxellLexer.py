# Generated from Pyxell.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2,")
        buf.write("\u00f4\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3")
        buf.write("\n\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3")
        buf.write("\17\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\27\3\27")
        buf.write("\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35")
        buf.write("\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3 \3 \3 \3!\3!\3\"")
        buf.write("\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3&\3&\3&\3&")
        buf.write("\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\6(\u00d6\n(\r(\16(\u00d7")
        buf.write("\3)\3)\7)\u00dc\n)\f)\16)\u00df\13)\3*\3*\3+\3+\3,\3,")
        buf.write("\3-\3-\3-\5-\u00ea\n-\3.\6.\u00ed\n.\r.\16.\u00ee\3.\3")
        buf.write(".\3/\3/\2\2\60\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13")
        buf.write("\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26")
        buf.write("+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#")
        buf.write("E$G%I&K\'M(O)Q*S\2U\2W\2Y\2[+],\3\2\7\3\2\62;\3\2c|\5")
        buf.write("\2C\\aac|\4\2))aa\5\2\13\f\17\17\"\"\2\u00f4\2\3\3\2\2")
        buf.write("\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2")
        buf.write("\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25")
        buf.write("\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3")
        buf.write("\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2")
        buf.write("\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2")
        buf.write("\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\2")
        buf.write("9\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2")
        buf.write("\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2")
        buf.write("\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2[\3\2\2\2\2]\3\2")
        buf.write("\2\2\3_\3\2\2\2\5a\3\2\2\2\7f\3\2\2\2\tl\3\2\2\2\13n\3")
        buf.write("\2\2\2\rp\3\2\2\2\17r\3\2\2\2\21t\3\2\2\2\23v\3\2\2\2")
        buf.write("\25x\3\2\2\2\27{\3\2\2\2\31~\3\2\2\2\33\u0080\3\2\2\2")
        buf.write("\35\u0082\3\2\2\2\37\u0084\3\2\2\2!\u0086\3\2\2\2#\u0089")
        buf.write("\3\2\2\2%\u008e\3\2\2\2\'\u0093\3\2\2\2)\u0099\3\2\2\2")
        buf.write("+\u009f\3\2\2\2-\u00a2\3\2\2\2/\u00a4\3\2\2\2\61\u00a6")
        buf.write("\3\2\2\2\63\u00a8\3\2\2\2\65\u00aa\3\2\2\2\67\u00ac\3")
        buf.write("\2\2\29\u00ae\3\2\2\2;\u00b1\3\2\2\2=\u00b4\3\2\2\2?\u00b6")
        buf.write("\3\2\2\2A\u00b9\3\2\2\2C\u00bb\3\2\2\2E\u00be\3\2\2\2")
        buf.write("G\u00c2\3\2\2\2I\u00c6\3\2\2\2K\u00c9\3\2\2\2M\u00ce\3")
        buf.write("\2\2\2O\u00d5\3\2\2\2Q\u00d9\3\2\2\2S\u00e0\3\2\2\2U\u00e2")
        buf.write("\3\2\2\2W\u00e4\3\2\2\2Y\u00e9\3\2\2\2[\u00ec\3\2\2\2")
        buf.write("]\u00f2\3\2\2\2_`\7=\2\2`\4\3\2\2\2ab\7u\2\2bc\7m\2\2")
        buf.write("cd\7k\2\2de\7r\2\2e\6\3\2\2\2fg\7r\2\2gh\7t\2\2hi\7k\2")
        buf.write("\2ij\7p\2\2jk\7v\2\2k\b\3\2\2\2lm\7?\2\2m\n\3\2\2\2no")
        buf.write("\7,\2\2o\f\3\2\2\2pq\7\61\2\2q\16\3\2\2\2rs\7\'\2\2s\20")
        buf.write("\3\2\2\2tu\7-\2\2u\22\3\2\2\2vw\7/\2\2w\24\3\2\2\2xy\7")
        buf.write(">\2\2yz\7>\2\2z\26\3\2\2\2{|\7@\2\2|}\7@\2\2}\30\3\2\2")
        buf.write("\2~\177\7(\2\2\177\32\3\2\2\2\u0080\u0081\7&\2\2\u0081")
        buf.write("\34\3\2\2\2\u0082\u0083\7~\2\2\u0083\36\3\2\2\2\u0084")
        buf.write("\u0085\7.\2\2\u0085 \3\2\2\2\u0086\u0087\7k\2\2\u0087")
        buf.write("\u0088\7h\2\2\u0088\"\3\2\2\2\u0089\u008a\7g\2\2\u008a")
        buf.write("\u008b\7n\2\2\u008b\u008c\7k\2\2\u008c\u008d\7h\2\2\u008d")
        buf.write("$\3\2\2\2\u008e\u008f\7g\2\2\u008f\u0090\7n\2\2\u0090")
        buf.write("\u0091\7u\2\2\u0091\u0092\7g\2\2\u0092&\3\2\2\2\u0093")
        buf.write("\u0094\7y\2\2\u0094\u0095\7j\2\2\u0095\u0096\7k\2\2\u0096")
        buf.write("\u0097\7n\2\2\u0097\u0098\7g\2\2\u0098(\3\2\2\2\u0099")
        buf.write("\u009a\7w\2\2\u009a\u009b\7p\2\2\u009b\u009c\7v\2\2\u009c")
        buf.write("\u009d\7k\2\2\u009d\u009e\7n\2\2\u009e*\3\2\2\2\u009f")
        buf.write("\u00a0\7f\2\2\u00a0\u00a1\7q\2\2\u00a1,\3\2\2\2\u00a2")
        buf.write("\u00a3\7}\2\2\u00a3.\3\2\2\2\u00a4\u00a5\7\177\2\2\u00a5")
        buf.write("\60\3\2\2\2\u00a6\u00a7\7*\2\2\u00a7\62\3\2\2\2\u00a8")
        buf.write("\u00a9\7+\2\2\u00a9\64\3\2\2\2\u00aa\u00ab\7\60\2\2\u00ab")
        buf.write("\66\3\2\2\2\u00ac\u00ad\7\u0080\2\2\u00ad8\3\2\2\2\u00ae")
        buf.write("\u00af\7?\2\2\u00af\u00b0\7?\2\2\u00b0:\3\2\2\2\u00b1")
        buf.write("\u00b2\7#\2\2\u00b2\u00b3\7?\2\2\u00b3<\3\2\2\2\u00b4")
        buf.write("\u00b5\7>\2\2\u00b5>\3\2\2\2\u00b6\u00b7\7>\2\2\u00b7")
        buf.write("\u00b8\7?\2\2\u00b8@\3\2\2\2\u00b9\u00ba\7@\2\2\u00ba")
        buf.write("B\3\2\2\2\u00bb\u00bc\7@\2\2\u00bc\u00bd\7?\2\2\u00bd")
        buf.write("D\3\2\2\2\u00be\u00bf\7p\2\2\u00bf\u00c0\7q\2\2\u00c0")
        buf.write("\u00c1\7v\2\2\u00c1F\3\2\2\2\u00c2\u00c3\7c\2\2\u00c3")
        buf.write("\u00c4\7p\2\2\u00c4\u00c5\7f\2\2\u00c5H\3\2\2\2\u00c6")
        buf.write("\u00c7\7q\2\2\u00c7\u00c8\7t\2\2\u00c8J\3\2\2\2\u00c9")
        buf.write("\u00ca\7v\2\2\u00ca\u00cb\7t\2\2\u00cb\u00cc\7w\2\2\u00cc")
        buf.write("\u00cd\7g\2\2\u00cdL\3\2\2\2\u00ce\u00cf\7h\2\2\u00cf")
        buf.write("\u00d0\7c\2\2\u00d0\u00d1\7n\2\2\u00d1\u00d2\7u\2\2\u00d2")
        buf.write("\u00d3\7g\2\2\u00d3N\3\2\2\2\u00d4\u00d6\5S*\2\u00d5\u00d4")
        buf.write("\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7")
        buf.write("\u00d8\3\2\2\2\u00d8P\3\2\2\2\u00d9\u00dd\5W,\2\u00da")
        buf.write("\u00dc\5Y-\2\u00db\u00da\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd")
        buf.write("\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00deR\3\2\2\2\u00df")
        buf.write("\u00dd\3\2\2\2\u00e0\u00e1\t\2\2\2\u00e1T\3\2\2\2\u00e2")
        buf.write("\u00e3\t\3\2\2\u00e3V\3\2\2\2\u00e4\u00e5\t\4\2\2\u00e5")
        buf.write("X\3\2\2\2\u00e6\u00ea\5W,\2\u00e7\u00ea\5S*\2\u00e8\u00ea")
        buf.write("\t\5\2\2\u00e9\u00e6\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9")
        buf.write("\u00e8\3\2\2\2\u00eaZ\3\2\2\2\u00eb\u00ed\t\6\2\2\u00ec")
        buf.write("\u00eb\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00ec\3\2\2\2")
        buf.write("\u00ee\u00ef\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f1\b")
        buf.write(".\2\2\u00f1\\\3\2\2\2\u00f2\u00f3\13\2\2\2\u00f3^\3\2")
        buf.write("\2\2\7\2\u00d7\u00dd\u00e9\u00ee\3\b\2\2")
        return buf.getvalue()


class PyxellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    INT = 39
    ID = 40
    WS = 41
    ERR = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'skip'", "'print'", "'='", "'*'", "'/'", "'%'", "'+'", 
            "'-'", "'<<'", "'>>'", "'&'", "'$'", "'|'", "','", "'if'", "'elif'", 
            "'else'", "'while'", "'until'", "'do'", "'{'", "'}'", "'('", 
            "')'", "'.'", "'~'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'not'", "'and'", "'or'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "ID", "WS", "ERR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "INT", "ID", "DIGIT", "LETTER", "ID_START", "ID_CONT", 
                  "WS", "ERR" ]

    grammarFileName = "Pyxell.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


