# Generated from Pyxell.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2;")
        buf.write("\u0166\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\4=\t=\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3")
        buf.write("\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16")
        buf.write("\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\37")
        buf.write("\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3%\3&\3&\3")
        buf.write("&\3&\3\'\3\'\3\'\3(\3(\3(\3)\3)\3*\3*\3*\3+\3+\3,\3,\3")
        buf.write(",\3-\3-\3-\3-\3.\3.\3.\3.\3/\3/\3/\3\60\3\60\3\61\3\61")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\64\6\64\u011e\n\64\r\64\16\64\u011f\3\65\6\65\u0123")
        buf.write("\n\65\r\65\16\65\u0124\3\65\3\65\6\65\u0129\n\65\r\65")
        buf.write("\16\65\u012a\3\65\3\65\5\65\u012f\n\65\3\65\6\65\u0132")
        buf.write("\n\65\r\65\16\65\u0133\5\65\u0136\n\65\3\66\3\66\3\66")
        buf.write("\3\66\7\66\u013c\n\66\f\66\16\66\u013f\13\66\3\66\3\66")
        buf.write("\3\67\3\67\3\67\3\67\7\67\u0147\n\67\f\67\16\67\u014a")
        buf.write("\13\67\3\67\3\67\38\38\78\u0150\n8\f8\168\u0153\138\3")
        buf.write("9\39\3:\3:\3;\3;\3;\5;\u015c\n;\3<\6<\u015f\n<\r<\16<")
        buf.write("\u0160\3<\3<\3=\3=\2\2>\3\3\5\4\7\5\t\6\13\7\r\b\17\t")
        buf.write("\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23")
        buf.write("%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36")
        buf.write(";\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63")
        buf.write("e\64g\65i\66k\67m8o9q\2s\2u\2w:y;\3\2\n\4\2))^^\6\2))")
        buf.write("^^ppvv\4\2$$^^\6\2$$^^ppvv\3\2\62;\5\2C\\aac|\4\2))aa")
        buf.write("\5\2\13\f\17\17\"\"\2\u0170\2\3\3\2\2\2\2\5\3\2\2\2\2")
        buf.write("\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3")
        buf.write("\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2")
        buf.write("\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2")
        buf.write("\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2")
        buf.write("\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2")
        buf.write("c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2")
        buf.write("\2m\3\2\2\2\2o\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\3{\3\2\2")
        buf.write("\2\5}\3\2\2\2\7\u0082\3\2\2\2\t\u0088\3\2\2\2\13\u008a")
        buf.write("\3\2\2\2\r\u008c\3\2\2\2\17\u008e\3\2\2\2\21\u0090\3\2")
        buf.write("\2\2\23\u0092\3\2\2\2\25\u0094\3\2\2\2\27\u0096\3\2\2")
        buf.write("\2\31\u0099\3\2\2\2\33\u009c\3\2\2\2\35\u009e\3\2\2\2")
        buf.write("\37\u00a0\3\2\2\2!\u00a2\3\2\2\2#\u00a8\3\2\2\2%\u00b1")
        buf.write("\3\2\2\2\'\u00b3\3\2\2\2)\u00b6\3\2\2\2+\u00bb\3\2\2\2")
        buf.write("-\u00c0\3\2\2\2/\u00c6\3\2\2\2\61\u00cc\3\2\2\2\63\u00d0")
        buf.write("\3\2\2\2\65\u00d3\3\2\2\2\67\u00d8\3\2\2\29\u00db\3\2")
        buf.write("\2\2;\u00dd\3\2\2\2=\u00df\3\2\2\2?\u00e1\3\2\2\2A\u00e3")
        buf.write("\3\2\2\2C\u00e5\3\2\2\2E\u00e7\3\2\2\2G\u00e9\3\2\2\2")
        buf.write("I\u00eb\3\2\2\2K\u00ee\3\2\2\2M\u00f2\3\2\2\2O\u00f5\3")
        buf.write("\2\2\2Q\u00f8\3\2\2\2S\u00fa\3\2\2\2U\u00fd\3\2\2\2W\u00ff")
        buf.write("\3\2\2\2Y\u0102\3\2\2\2[\u0106\3\2\2\2]\u010a\3\2\2\2")
        buf.write("_\u010d\3\2\2\2a\u010f\3\2\2\2c\u0111\3\2\2\2e\u0116\3")
        buf.write("\2\2\2g\u011d\3\2\2\2i\u0122\3\2\2\2k\u0137\3\2\2\2m\u0142")
        buf.write("\3\2\2\2o\u014d\3\2\2\2q\u0154\3\2\2\2s\u0156\3\2\2\2")
        buf.write("u\u015b\3\2\2\2w\u015e\3\2\2\2y\u0164\3\2\2\2{|\7=\2\2")
        buf.write("|\4\3\2\2\2}~\7u\2\2~\177\7m\2\2\177\u0080\7k\2\2\u0080")
        buf.write("\u0081\7r\2\2\u0081\6\3\2\2\2\u0082\u0083\7r\2\2\u0083")
        buf.write("\u0084\7t\2\2\u0084\u0085\7k\2\2\u0085\u0086\7p\2\2\u0086")
        buf.write("\u0087\7v\2\2\u0087\b\3\2\2\2\u0088\u0089\7?\2\2\u0089")
        buf.write("\n\3\2\2\2\u008a\u008b\7`\2\2\u008b\f\3\2\2\2\u008c\u008d")
        buf.write("\7,\2\2\u008d\16\3\2\2\2\u008e\u008f\7\61\2\2\u008f\20")
        buf.write("\3\2\2\2\u0090\u0091\7\'\2\2\u0091\22\3\2\2\2\u0092\u0093")
        buf.write("\7-\2\2\u0093\24\3\2\2\2\u0094\u0095\7/\2\2\u0095\26\3")
        buf.write("\2\2\2\u0096\u0097\7>\2\2\u0097\u0098\7>\2\2\u0098\30")
        buf.write("\3\2\2\2\u0099\u009a\7@\2\2\u009a\u009b\7@\2\2\u009b\32")
        buf.write("\3\2\2\2\u009c\u009d\7(\2\2\u009d\34\3\2\2\2\u009e\u009f")
        buf.write("\7&\2\2\u009f\36\3\2\2\2\u00a0\u00a1\7~\2\2\u00a1 \3\2")
        buf.write("\2\2\u00a2\u00a3\7d\2\2\u00a3\u00a4\7t\2\2\u00a4\u00a5")
        buf.write("\7g\2\2\u00a5\u00a6\7c\2\2\u00a6\u00a7\7m\2\2\u00a7\"")
        buf.write("\3\2\2\2\u00a8\u00a9\7e\2\2\u00a9\u00aa\7q\2\2\u00aa\u00ab")
        buf.write("\7p\2\2\u00ab\u00ac\7v\2\2\u00ac\u00ad\7k\2\2\u00ad\u00ae")
        buf.write("\7p\2\2\u00ae\u00af\7w\2\2\u00af\u00b0\7g\2\2\u00b0$\3")
        buf.write("\2\2\2\u00b1\u00b2\7.\2\2\u00b2&\3\2\2\2\u00b3\u00b4\7")
        buf.write("k\2\2\u00b4\u00b5\7h\2\2\u00b5(\3\2\2\2\u00b6\u00b7\7")
        buf.write("g\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9\7k\2\2\u00b9\u00ba")
        buf.write("\7h\2\2\u00ba*\3\2\2\2\u00bb\u00bc\7g\2\2\u00bc\u00bd")
        buf.write("\7n\2\2\u00bd\u00be\7u\2\2\u00be\u00bf\7g\2\2\u00bf,\3")
        buf.write("\2\2\2\u00c0\u00c1\7y\2\2\u00c1\u00c2\7j\2\2\u00c2\u00c3")
        buf.write("\7k\2\2\u00c3\u00c4\7n\2\2\u00c4\u00c5\7g\2\2\u00c5.\3")
        buf.write("\2\2\2\u00c6\u00c7\7w\2\2\u00c7\u00c8\7p\2\2\u00c8\u00c9")
        buf.write("\7v\2\2\u00c9\u00ca\7k\2\2\u00ca\u00cb\7n\2\2\u00cb\60")
        buf.write("\3\2\2\2\u00cc\u00cd\7h\2\2\u00cd\u00ce\7q\2\2\u00ce\u00cf")
        buf.write("\7t\2\2\u00cf\62\3\2\2\2\u00d0\u00d1\7k\2\2\u00d1\u00d2")
        buf.write("\7p\2\2\u00d2\64\3\2\2\2\u00d3\u00d4\7u\2\2\u00d4\u00d5")
        buf.write("\7v\2\2\u00d5\u00d6\7g\2\2\u00d6\u00d7\7r\2\2\u00d7\66")
        buf.write("\3\2\2\2\u00d8\u00d9\7f\2\2\u00d9\u00da\7q\2\2\u00da8")
        buf.write("\3\2\2\2\u00db\u00dc\7}\2\2\u00dc:\3\2\2\2\u00dd\u00de")
        buf.write("\7\177\2\2\u00de<\3\2\2\2\u00df\u00e0\7*\2\2\u00e0>\3")
        buf.write("\2\2\2\u00e1\u00e2\7+\2\2\u00e2@\3\2\2\2\u00e3\u00e4\7")
        buf.write("]\2\2\u00e4B\3\2\2\2\u00e5\u00e6\7_\2\2\u00e6D\3\2\2\2")
        buf.write("\u00e7\u00e8\7\60\2\2\u00e8F\3\2\2\2\u00e9\u00ea\7\u0080")
        buf.write("\2\2\u00eaH\3\2\2\2\u00eb\u00ec\7\60\2\2\u00ec\u00ed\7")
        buf.write("\60\2\2\u00edJ\3\2\2\2\u00ee\u00ef\7\60\2\2\u00ef\u00f0")
        buf.write("\7\60\2\2\u00f0\u00f1\7\60\2\2\u00f1L\3\2\2\2\u00f2\u00f3")
        buf.write("\7?\2\2\u00f3\u00f4\7?\2\2\u00f4N\3\2\2\2\u00f5\u00f6")
        buf.write("\7#\2\2\u00f6\u00f7\7?\2\2\u00f7P\3\2\2\2\u00f8\u00f9")
        buf.write("\7>\2\2\u00f9R\3\2\2\2\u00fa\u00fb\7>\2\2\u00fb\u00fc")
        buf.write("\7?\2\2\u00fcT\3\2\2\2\u00fd\u00fe\7@\2\2\u00feV\3\2\2")
        buf.write("\2\u00ff\u0100\7@\2\2\u0100\u0101\7?\2\2\u0101X\3\2\2")
        buf.write("\2\u0102\u0103\7p\2\2\u0103\u0104\7q\2\2\u0104\u0105\7")
        buf.write("v\2\2\u0105Z\3\2\2\2\u0106\u0107\7c\2\2\u0107\u0108\7")
        buf.write("p\2\2\u0108\u0109\7f\2\2\u0109\\\3\2\2\2\u010a\u010b\7")
        buf.write("q\2\2\u010b\u010c\7t\2\2\u010c^\3\2\2\2\u010d\u010e\7")
        buf.write("A\2\2\u010e`\3\2\2\2\u010f\u0110\7<\2\2\u0110b\3\2\2\2")
        buf.write("\u0111\u0112\7v\2\2\u0112\u0113\7t\2\2\u0113\u0114\7w")
        buf.write("\2\2\u0114\u0115\7g\2\2\u0115d\3\2\2\2\u0116\u0117\7h")
        buf.write("\2\2\u0117\u0118\7c\2\2\u0118\u0119\7n\2\2\u0119\u011a")
        buf.write("\7u\2\2\u011a\u011b\7g\2\2\u011bf\3\2\2\2\u011c\u011e")
        buf.write("\5q9\2\u011d\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u011d")
        buf.write("\3\2\2\2\u011f\u0120\3\2\2\2\u0120h\3\2\2\2\u0121\u0123")
        buf.write("\5q9\2\u0122\u0121\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0122")
        buf.write("\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0126\3\2\2\2\u0126")
        buf.write("\u0128\7\60\2\2\u0127\u0129\5q9\2\u0128\u0127\3\2\2\2")
        buf.write("\u0129\u012a\3\2\2\2\u012a\u0128\3\2\2\2\u012a\u012b\3")
        buf.write("\2\2\2\u012b\u0135\3\2\2\2\u012c\u012e\7g\2\2\u012d\u012f")
        buf.write("\7/\2\2\u012e\u012d\3\2\2\2\u012e\u012f\3\2\2\2\u012f")
        buf.write("\u0131\3\2\2\2\u0130\u0132\5q9\2\u0131\u0130\3\2\2\2\u0132")
        buf.write("\u0133\3\2\2\2\u0133\u0131\3\2\2\2\u0133\u0134\3\2\2\2")
        buf.write("\u0134\u0136\3\2\2\2\u0135\u012c\3\2\2\2\u0135\u0136\3")
        buf.write("\2\2\2\u0136j\3\2\2\2\u0137\u013d\7)\2\2\u0138\u013c\n")
        buf.write("\2\2\2\u0139\u013a\7^\2\2\u013a\u013c\t\3\2\2\u013b\u0138")
        buf.write("\3\2\2\2\u013b\u0139\3\2\2\2\u013c\u013f\3\2\2\2\u013d")
        buf.write("\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0140\3\2\2\2")
        buf.write("\u013f\u013d\3\2\2\2\u0140\u0141\7)\2\2\u0141l\3\2\2\2")
        buf.write("\u0142\u0148\7$\2\2\u0143\u0147\n\4\2\2\u0144\u0145\7")
        buf.write("^\2\2\u0145\u0147\t\5\2\2\u0146\u0143\3\2\2\2\u0146\u0144")
        buf.write("\3\2\2\2\u0147\u014a\3\2\2\2\u0148\u0146\3\2\2\2\u0148")
        buf.write("\u0149\3\2\2\2\u0149\u014b\3\2\2\2\u014a\u0148\3\2\2\2")
        buf.write("\u014b\u014c\7$\2\2\u014cn\3\2\2\2\u014d\u0151\5s:\2\u014e")
        buf.write("\u0150\5u;\2\u014f\u014e\3\2\2\2\u0150\u0153\3\2\2\2\u0151")
        buf.write("\u014f\3\2\2\2\u0151\u0152\3\2\2\2\u0152p\3\2\2\2\u0153")
        buf.write("\u0151\3\2\2\2\u0154\u0155\t\6\2\2\u0155r\3\2\2\2\u0156")
        buf.write("\u0157\t\7\2\2\u0157t\3\2\2\2\u0158\u015c\5s:\2\u0159")
        buf.write("\u015c\5q9\2\u015a\u015c\t\b\2\2\u015b\u0158\3\2\2\2\u015b")
        buf.write("\u0159\3\2\2\2\u015b\u015a\3\2\2\2\u015cv\3\2\2\2\u015d")
        buf.write("\u015f\t\t\2\2\u015e\u015d\3\2\2\2\u015f\u0160\3\2\2\2")
        buf.write("\u0160\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0162\3")
        buf.write("\2\2\2\u0162\u0163\b<\2\2\u0163x\3\2\2\2\u0164\u0165\13")
        buf.write("\2\2\2\u0165z\3\2\2\2\20\2\u011f\u0124\u012a\u012e\u0133")
        buf.write("\u0135\u013b\u013d\u0146\u0148\u0151\u015b\u0160\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class PyxellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    INT = 51
    FLOAT = 52
    CHAR = 53
    STRING = 54
    ID = 55
    WS = 56
    ERR = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'skip'", "'print'", "'='", "'^'", "'*'", "'/'", "'%'", 
            "'+'", "'-'", "'<<'", "'>>'", "'&'", "'$'", "'|'", "'break'", 
            "'continue'", "','", "'if'", "'elif'", "'else'", "'while'", 
            "'until'", "'for'", "'in'", "'step'", "'do'", "'{'", "'}'", 
            "'('", "')'", "'['", "']'", "'.'", "'~'", "'..'", "'...'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'not'", "'and'", "'or'", 
            "'?'", "':'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "CHAR", "STRING", "ID", "WS", "ERR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "INT", "FLOAT", "CHAR", "STRING", "ID", "DIGIT", "ID_START", 
                  "ID_CONT", "WS", "ERR" ]

    grammarFileName = "Pyxell.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


