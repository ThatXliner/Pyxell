# Generated from Pyxell.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\63")
        buf.write("\u011e\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t")
        buf.write("\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3")
        buf.write("\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27")
        buf.write("\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34")
        buf.write("\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3")
        buf.write("\"\3#\3#\3#\3$\3$\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3\'")
        buf.write("\3(\3(\3(\3)\3)\3*\3*\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3")
        buf.write(",\3-\6-\u00ec\n-\r-\16-\u00ed\3.\3.\3.\3.\7.\u00f4\n.")
        buf.write("\f.\16.\u00f7\13.\3.\3.\3/\3/\3/\3/\7/\u00ff\n/\f/\16")
        buf.write("/\u0102\13/\3/\3/\3\60\3\60\7\60\u0108\n\60\f\60\16\60")
        buf.write("\u010b\13\60\3\61\3\61\3\62\3\62\3\63\3\63\3\63\5\63\u0114")
        buf.write("\n\63\3\64\6\64\u0117\n\64\r\64\16\64\u0118\3\64\3\64")
        buf.write("\3\65\3\65\2\2\66\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23")
        buf.write("\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25")
        buf.write(")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A")
        buf.write("\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\2c\2e\2g\62i\63")
        buf.write("\3\2\n\4\2))^^\6\2))^^ppvv\4\2$$^^\6\2$$^^ppvv\3\2\62")
        buf.write(";\5\2C\\aac|\4\2))aa\5\2\13\f\17\17\"\"\2\u0123\2\3\3")
        buf.write("\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2")
        buf.write("\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2")
        buf.write("\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2")
        buf.write("\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2")
        buf.write("\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3")
        buf.write("\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2")
        buf.write("\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3")
        buf.write("\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K")
        buf.write("\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2")
        buf.write("U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2")
        buf.write("\2_\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\3k\3\2\2\2\5m\3\2\2")
        buf.write("\2\7r\3\2\2\2\tx\3\2\2\2\13z\3\2\2\2\r|\3\2\2\2\17~\3")
        buf.write("\2\2\2\21\u0080\3\2\2\2\23\u0082\3\2\2\2\25\u0084\3\2")
        buf.write("\2\2\27\u0086\3\2\2\2\31\u0089\3\2\2\2\33\u008c\3\2\2")
        buf.write("\2\35\u008e\3\2\2\2\37\u0090\3\2\2\2!\u0092\3\2\2\2#\u0094")
        buf.write("\3\2\2\2%\u0097\3\2\2\2\'\u009c\3\2\2\2)\u00a1\3\2\2\2")
        buf.write("+\u00a7\3\2\2\2-\u00ad\3\2\2\2/\u00b0\3\2\2\2\61\u00b2")
        buf.write("\3\2\2\2\63\u00b4\3\2\2\2\65\u00b6\3\2\2\2\67\u00b8\3")
        buf.write("\2\2\29\u00ba\3\2\2\2;\u00bc\3\2\2\2=\u00be\3\2\2\2?\u00c0")
        buf.write("\3\2\2\2A\u00c3\3\2\2\2C\u00c6\3\2\2\2E\u00c8\3\2\2\2")
        buf.write("G\u00cb\3\2\2\2I\u00cd\3\2\2\2K\u00d0\3\2\2\2M\u00d4\3")
        buf.write("\2\2\2O\u00d8\3\2\2\2Q\u00db\3\2\2\2S\u00dd\3\2\2\2U\u00df")
        buf.write("\3\2\2\2W\u00e4\3\2\2\2Y\u00eb\3\2\2\2[\u00ef\3\2\2\2")
        buf.write("]\u00fa\3\2\2\2_\u0105\3\2\2\2a\u010c\3\2\2\2c\u010e\3")
        buf.write("\2\2\2e\u0113\3\2\2\2g\u0116\3\2\2\2i\u011c\3\2\2\2kl")
        buf.write("\7=\2\2l\4\3\2\2\2mn\7u\2\2no\7m\2\2op\7k\2\2pq\7r\2\2")
        buf.write("q\6\3\2\2\2rs\7r\2\2st\7t\2\2tu\7k\2\2uv\7p\2\2vw\7v\2")
        buf.write("\2w\b\3\2\2\2xy\7?\2\2y\n\3\2\2\2z{\7`\2\2{\f\3\2\2\2")
        buf.write("|}\7,\2\2}\16\3\2\2\2~\177\7\61\2\2\177\20\3\2\2\2\u0080")
        buf.write("\u0081\7\'\2\2\u0081\22\3\2\2\2\u0082\u0083\7-\2\2\u0083")
        buf.write("\24\3\2\2\2\u0084\u0085\7/\2\2\u0085\26\3\2\2\2\u0086")
        buf.write("\u0087\7>\2\2\u0087\u0088\7>\2\2\u0088\30\3\2\2\2\u0089")
        buf.write("\u008a\7@\2\2\u008a\u008b\7@\2\2\u008b\32\3\2\2\2\u008c")
        buf.write("\u008d\7(\2\2\u008d\34\3\2\2\2\u008e\u008f\7&\2\2\u008f")
        buf.write("\36\3\2\2\2\u0090\u0091\7~\2\2\u0091 \3\2\2\2\u0092\u0093")
        buf.write("\7.\2\2\u0093\"\3\2\2\2\u0094\u0095\7k\2\2\u0095\u0096")
        buf.write("\7h\2\2\u0096$\3\2\2\2\u0097\u0098\7g\2\2\u0098\u0099")
        buf.write("\7n\2\2\u0099\u009a\7k\2\2\u009a\u009b\7h\2\2\u009b&\3")
        buf.write("\2\2\2\u009c\u009d\7g\2\2\u009d\u009e\7n\2\2\u009e\u009f")
        buf.write("\7u\2\2\u009f\u00a0\7g\2\2\u00a0(\3\2\2\2\u00a1\u00a2")
        buf.write("\7y\2\2\u00a2\u00a3\7j\2\2\u00a3\u00a4\7k\2\2\u00a4\u00a5")
        buf.write("\7n\2\2\u00a5\u00a6\7g\2\2\u00a6*\3\2\2\2\u00a7\u00a8")
        buf.write("\7w\2\2\u00a8\u00a9\7p\2\2\u00a9\u00aa\7v\2\2\u00aa\u00ab")
        buf.write("\7k\2\2\u00ab\u00ac\7n\2\2\u00ac,\3\2\2\2\u00ad\u00ae")
        buf.write("\7f\2\2\u00ae\u00af\7q\2\2\u00af.\3\2\2\2\u00b0\u00b1")
        buf.write("\7}\2\2\u00b1\60\3\2\2\2\u00b2\u00b3\7\177\2\2\u00b3\62")
        buf.write("\3\2\2\2\u00b4\u00b5\7*\2\2\u00b5\64\3\2\2\2\u00b6\u00b7")
        buf.write("\7+\2\2\u00b7\66\3\2\2\2\u00b8\u00b9\7]\2\2\u00b98\3\2")
        buf.write("\2\2\u00ba\u00bb\7_\2\2\u00bb:\3\2\2\2\u00bc\u00bd\7\60")
        buf.write("\2\2\u00bd<\3\2\2\2\u00be\u00bf\7\u0080\2\2\u00bf>\3\2")
        buf.write("\2\2\u00c0\u00c1\7?\2\2\u00c1\u00c2\7?\2\2\u00c2@\3\2")
        buf.write("\2\2\u00c3\u00c4\7#\2\2\u00c4\u00c5\7?\2\2\u00c5B\3\2")
        buf.write("\2\2\u00c6\u00c7\7>\2\2\u00c7D\3\2\2\2\u00c8\u00c9\7>")
        buf.write("\2\2\u00c9\u00ca\7?\2\2\u00caF\3\2\2\2\u00cb\u00cc\7@")
        buf.write("\2\2\u00ccH\3\2\2\2\u00cd\u00ce\7@\2\2\u00ce\u00cf\7?")
        buf.write("\2\2\u00cfJ\3\2\2\2\u00d0\u00d1\7p\2\2\u00d1\u00d2\7q")
        buf.write("\2\2\u00d2\u00d3\7v\2\2\u00d3L\3\2\2\2\u00d4\u00d5\7c")
        buf.write("\2\2\u00d5\u00d6\7p\2\2\u00d6\u00d7\7f\2\2\u00d7N\3\2")
        buf.write("\2\2\u00d8\u00d9\7q\2\2\u00d9\u00da\7t\2\2\u00daP\3\2")
        buf.write("\2\2\u00db\u00dc\7A\2\2\u00dcR\3\2\2\2\u00dd\u00de\7<")
        buf.write("\2\2\u00deT\3\2\2\2\u00df\u00e0\7v\2\2\u00e0\u00e1\7t")
        buf.write("\2\2\u00e1\u00e2\7w\2\2\u00e2\u00e3\7g\2\2\u00e3V\3\2")
        buf.write("\2\2\u00e4\u00e5\7h\2\2\u00e5\u00e6\7c\2\2\u00e6\u00e7")
        buf.write("\7n\2\2\u00e7\u00e8\7u\2\2\u00e8\u00e9\7g\2\2\u00e9X\3")
        buf.write("\2\2\2\u00ea\u00ec\5a\61\2\u00eb\u00ea\3\2\2\2\u00ec\u00ed")
        buf.write("\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee")
        buf.write("Z\3\2\2\2\u00ef\u00f5\7)\2\2\u00f0\u00f4\n\2\2\2\u00f1")
        buf.write("\u00f2\7^\2\2\u00f2\u00f4\t\3\2\2\u00f3\u00f0\3\2\2\2")
        buf.write("\u00f3\u00f1\3\2\2\2\u00f4\u00f7\3\2\2\2\u00f5\u00f3\3")
        buf.write("\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f8\3\2\2\2\u00f7\u00f5")
        buf.write("\3\2\2\2\u00f8\u00f9\7)\2\2\u00f9\\\3\2\2\2\u00fa\u0100")
        buf.write("\7$\2\2\u00fb\u00ff\n\4\2\2\u00fc\u00fd\7^\2\2\u00fd\u00ff")
        buf.write("\t\5\2\2\u00fe\u00fb\3\2\2\2\u00fe\u00fc\3\2\2\2\u00ff")
        buf.write("\u0102\3\2\2\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2")
        buf.write("\u0101\u0103\3\2\2\2\u0102\u0100\3\2\2\2\u0103\u0104\7")
        buf.write("$\2\2\u0104^\3\2\2\2\u0105\u0109\5c\62\2\u0106\u0108\5")
        buf.write("e\63\2\u0107\u0106\3\2\2\2\u0108\u010b\3\2\2\2\u0109\u0107")
        buf.write("\3\2\2\2\u0109\u010a\3\2\2\2\u010a`\3\2\2\2\u010b\u0109")
        buf.write("\3\2\2\2\u010c\u010d\t\6\2\2\u010db\3\2\2\2\u010e\u010f")
        buf.write("\t\7\2\2\u010fd\3\2\2\2\u0110\u0114\5c\62\2\u0111\u0114")
        buf.write("\5a\61\2\u0112\u0114\t\b\2\2\u0113\u0110\3\2\2\2\u0113")
        buf.write("\u0111\3\2\2\2\u0113\u0112\3\2\2\2\u0114f\3\2\2\2\u0115")
        buf.write("\u0117\t\t\2\2\u0116\u0115\3\2\2\2\u0117\u0118\3\2\2\2")
        buf.write("\u0118\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011a\3")
        buf.write("\2\2\2\u011a\u011b\b\64\2\2\u011bh\3\2\2\2\u011c\u011d")
        buf.write("\13\2\2\2\u011dj\3\2\2\2\13\2\u00ed\u00f3\u00f5\u00fe")
        buf.write("\u0100\u0109\u0113\u0118\3\b\2\2")
        return buf.getvalue()


class PyxellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    INT = 44
    CHAR = 45
    STRING = 46
    ID = 47
    WS = 48
    ERR = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'skip'", "'print'", "'='", "'^'", "'*'", "'/'", "'%'", 
            "'+'", "'-'", "'<<'", "'>>'", "'&'", "'$'", "'|'", "','", "'if'", 
            "'elif'", "'else'", "'while'", "'until'", "'do'", "'{'", "'}'", 
            "'('", "')'", "'['", "']'", "'.'", "'~'", "'=='", "'!='", "'<'", 
            "'<='", "'>'", "'>='", "'not'", "'and'", "'or'", "'?'", "':'", 
            "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "CHAR", "STRING", "ID", "WS", "ERR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "INT", "CHAR", 
                  "STRING", "ID", "DIGIT", "ID_START", "ID_CONT", "WS", 
                  "ERR" ]

    grammarFileName = "Pyxell.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


