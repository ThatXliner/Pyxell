{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintPyxell.
--   Generated by the BNF converter.

module PrintPyxell where

import AbsPyxell
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ident where
  prt _ (Ident i) = doc (showString i)

instance Print (Program a) where
  prt i e = case e of
    Program _ stmts -> prPrec i 0 (concatD [prt 0 stmts])

instance Print [Stmt a] where
  prt = prtList

instance Print (Block a) where
  prt i e = case e of
    SBlock _ stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print (Stmt a) where
  prt i e = case e of
    SSkip _ -> prPrec i 0 (concatD [doc (showString "skip")])
    SAssg _ exprs -> prPrec i 0 (concatD [prt 0 exprs])
    SIf _ branchs else_ -> prPrec i 0 (concatD [doc (showString "if"), prt 0 branchs, prt 0 else_])
    SWhile _ expr block -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expr, doc (showString ":"), prt 0 block])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Expr a] where
  prt = prtList

instance Print (Branch a) where
  prt i e = case e of
    BElIf _ expr block -> prPrec i 0 (concatD [prt 0 expr, doc (showString ":"), prt 0 block])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "elif"), prt 0 xs]

instance Print [Branch a] where
  prt = prtList

instance Print (Else a) where
  prt i e = case e of
    EElse _ block -> prPrec i 0 (concatD [doc (showString "else"), doc (showString ":"), prt 0 block])
    EEmpty _ -> prPrec i 0 (concatD [])

instance Print (Cmp a) where
  prt i e = case e of
    Cmp1 _ expr1 cmpop expr2 -> prPrec i 0 (concatD [prt 6 expr1, prt 0 cmpop, prt 6 expr2])
    Cmp2 _ expr cmpop cmp -> prPrec i 0 (concatD [prt 6 expr, prt 0 cmpop, prt 0 cmp])

instance Print (CmpOp a) where
  prt i e = case e of
    CmpEQ _ -> prPrec i 0 (concatD [doc (showString "==")])
    CmpNE _ -> prPrec i 0 (concatD [doc (showString "<>")])
    CmpLT _ -> prPrec i 0 (concatD [doc (showString "<")])
    CmpLE _ -> prPrec i 0 (concatD [doc (showString "<=")])
    CmpGT _ -> prPrec i 0 (concatD [doc (showString ">")])
    CmpGE _ -> prPrec i 0 (concatD [doc (showString ">=")])

instance Print (Expr a) where
  prt i e = case e of
    EInt _ n -> prPrec i 8 (concatD [prt 0 n])
    ETrue _ -> prPrec i 8 (concatD [doc (showString "true")])
    EFalse _ -> prPrec i 8 (concatD [doc (showString "false")])
    EString _ str -> prPrec i 8 (concatD [prt 0 str])
    EVar _ id -> prPrec i 8 (concatD [prt 0 id])
    EElem _ expr n -> prPrec i 8 (concatD [prt 8 expr, doc (showString "."), prt 0 n])
    EMul _ expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, doc (showString "*"), prt 8 expr2])
    EDiv _ expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, doc (showString "/"), prt 8 expr2])
    EMod _ expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, doc (showString "%"), prt 8 expr2])
    EAdd _ expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "+"), prt 7 expr2])
    ESub _ expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "-"), prt 7 expr2])
    ENeg _ expr -> prPrec i 6 (concatD [doc (showString "-"), prt 7 expr])
    ECmp _ cmp -> prPrec i 5 (concatD [prt 0 cmp])
    ENot _ expr -> prPrec i 4 (concatD [doc (showString "not"), prt 4 expr])
    EAnd _ expr1 expr2 -> prPrec i 3 (concatD [prt 4 expr1, doc (showString "and"), prt 3 expr2])
    EOr _ expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "or"), prt 2 expr2])
    ETuple _ exprs -> prPrec i 1 (concatD [prt 2 exprs])
  prtList 2 [x] = concatD [prt 2 x]
  prtList 2 (x:xs) = concatD [prt 2 x, doc (showString ","), prt 2 xs]
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "="), prt 0 xs]

instance Print (Type a) where
  prt i e = case e of
    TDeref _ type_ -> prPrec i 4 (concatD [prt 4 type_])
    TInt _ -> prPrec i 4 (concatD [doc (showString "Int")])
    TBool _ -> prPrec i 4 (concatD [doc (showString "Bool")])
    TString _ -> prPrec i 4 (concatD [doc (showString "String")])
    TTuple _ types -> prPrec i 2 (concatD [prt 3 types])
  prtList 3 [x] = concatD [prt 3 x]
  prtList 3 (x:xs) = concatD [prt 3 x, doc (showString "*"), prt 3 xs]

