
-- layout --

layout             "do", "def" ;
layout stop        "elif", "else" ;
layout toplevel    ;


-- program --

Program.           Program ::= [Stmt] ;
separator          Stmt        ";" ;


-- statements --

SProc.             Stmt   ::= "func" Ident "(" [ArgF] ")" "def" Block ;
SFunc.             Stmt   ::= "func" Ident "(" [ArgF] ")" Type "def" Block ;
SProcExtern.       Stmt   ::= "func" Ident "(" [ArgF] ")" "extern" ;
SFuncExtern.       Stmt   ::= "func" Ident "(" [ArgF] ")" Type "extern" ;
ANoDefault.        ArgF   ::= Type Ident ;
ADefault.          ArgF   ::= Type Ident ":" Expr2 ;
separator          ArgF       "," ;
SRetVoid.          Stmt   ::= "return" ;
SRetExpr.          Stmt   ::= "return" Expr ;

SBlock.            Block   ::= "{" [Stmt] "}" ;

SSkip.             Stmt   ::= "skip" ;
SPrint.            Stmt   ::= "print" Expr ;

SAssg.             Stmt   ::= [Expr];
separator nonempty Expr       "=" ;
SAssgMul.          Stmt   ::= Expr "*=" Expr;
SAssgDiv.          Stmt   ::= Expr "/=" Expr;
SAssgMod.          Stmt   ::= Expr "%=" Expr;
SAssgAdd.          Stmt   ::= Expr "+=" Expr;
SAssgSub.          Stmt   ::= Expr "-=" Expr;

SIf.               Stmt   ::= "if" [Branch] Else ;
BElIf.             Branch ::= Expr "do" Block ;
separator          Branch     "elif" ;
EElse.             Else   ::= "else" "do" Block ;
EEmpty.            Else   ::= ;

SWhile.            Stmt   ::= "while" Expr "do" Block ;
SUntil.            Stmt   ::= "until" Expr "do" Block ;
SFor.              Stmt   ::= "for" Expr "in" Expr "do" Block ;
SContinue.         Stmt   ::= "continue" ;
SBreak.            Stmt   ::= "break" ;


-- expressions --

EInt.              Expr10 ::= Integer ;
ETrue.             Expr10 ::= "true" ;
EFalse.            Expr10 ::= "false" ;
EChar.             Expr10 ::= Char ;
EString.           Expr10 ::= String ;
EArray.            Expr10 ::= "[" [Expr2] "]" ;

EVar.              Expr10 ::= Ident ;
EElem.             Expr10 ::= Expr10 "." Integer ;
EIndex.            Expr10 ::= Expr10 "[" Expr "]" ;
EAttr.             Expr10 ::= Expr10 "." Ident ;
ECall.             Expr10 ::= Expr10 "(" [ArgC] ")";
APos.              ArgC   ::= Expr2 ;
ANamed.            ArgC   ::= Ident "=" Expr2 ;
separator          ArgC       "," ;

EPow.              Expr9  ::= Expr10 "**" Expr9 ;
EMul.              Expr8  ::= Expr8 "*" Expr9 ;
EDiv.              Expr8  ::= Expr8 "/" Expr9 ;
EMod.              Expr8  ::= Expr8 "%" Expr9 ;
EAdd.              Expr7  ::= Expr7 "+" Expr8 ;
ESub.              Expr7  ::= Expr7 "-" Expr8 ;
ENeg.              Expr7  ::= "-" Expr8;

ERangeIncl.        Expr6  ::= Expr7 ".." Expr7 ;
ERangeExcl.        Expr6  ::= Expr7 "..." Expr7 ;
ERangeInclStep.    Expr6  ::= Expr7 ".." Expr7 ".." Expr7 ;
ERangeExclStep.    Expr6  ::= Expr7 "..." Expr7 ".." Expr7 ;

ECmp.              Expr5  ::= Cmp ;
Cmp1.              Cmp    ::= Expr6 CmpOp Expr6 ;
Cmp2.              Cmp    ::= Expr6 CmpOp Cmp ;
CmpEQ.             CmpOp  ::= "==" ;
CmpNE.             CmpOp  ::= "!=" ;
CmpLT.             CmpOp  ::= "<" ;
CmpLE.             CmpOp  ::= "<=" ;
CmpGT.             CmpOp  ::= ">" ;
CmpGE.             CmpOp  ::= ">=" ;

ENot.              Expr5  ::= "not" Expr5 ;
EAnd.              Expr4  ::= Expr5 "and" Expr4 ;
EOr.               Expr3  ::= Expr4 "or" Expr3 ;

ETuple.            Expr1  ::= [Expr3] ;

separator nonempty Expr3      "," ;
separator          Expr2      "," ;

-- when ECond is above separator for Expr3, strange things happen
ECond.             Expr2  ::= Expr3 "?" Expr3 ":" Expr2 ;

coercions          Expr       10 ;


-- types --

internal TPtr.     Type4  ::= Type4 ;
internal TArr.     Type4  ::= Integer Type4 ;
internal TDeref.   Type4  ::= Type4 ;
internal TLabel.   Type4  ::= "Label" ;
TVoid.             Type4  ::= "Void" ;
TInt.              Type4  ::= "Int" ;
TBool.             Type4  ::= "Bool" ;
TChar.             Type4  ::= "Char" ;
TObject.           Type4  ::= "Object" ;
TString.           Type4  ::= "String" ;
TArray.            Type4  ::= "[" Type "]" ;
TTuple.            Type2  ::= [Type3] ;
internal TArgN.    Type2  ::= Type1 Ident ;
internal TArgD.    Type2  ::= Type1 Ident String ;
TFunc.             Type1  ::= [Type2] "->" Type2 ;

separator nonempty Type3      "*" ;
separator nonempty Type2      "," ;

coercions          Type       4 ;


-- comments --

comment            "#" ;
comment            "/*" "*/" ;