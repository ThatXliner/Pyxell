
-- layout --

layout             "do", "def" ;
layout stop        "elif", "else" ;
layout toplevel    ;


-- program --

Program.           Program ::= [Stmt] ;
separator          Stmt        ";" ;


-- statements --

SUse.              Stmt   ::= "use" Ident Use ;
UAll.              Use    ::= "" ;
UOnly.             Use    ::= "only" [Ident] ;
UHiding.           Use    ::= "hiding" [Ident] ;
UAs.               Use    ::= "as" Ident ;

SFunc.             Stmt   ::= "func" Ident FVars "(" [FArg] ")" FRet FBody ;
FStd.              FVars  ::= "" ;
FGen.              FVars  ::= "<" [FVar] ">" ;
FVar.              FVar   ::= Class Ident ;
separator          FVar       "," ;
ANoDefault.        FArg   ::= Type Ident ;
ADefault.          FArg   ::= Type Ident ":" Expr2 ;
separator          FArg       "," ;
FProc.             FRet   ::= "" ;
FFunc.             FRet   ::= Type ;
FDef.              FBody  ::= "def" Block ;
FExtern.           FBody  ::= "extern" ;
SRetVoid.          Stmt   ::= "return" ;
SRetExpr.          Stmt   ::= "return" Expr ;

SBlock.            Block   ::= "{" [Stmt] "}" ;

SSkip.             Stmt   ::= "skip" ;
SPrint.            Stmt   ::= "print" Expr ;
SPrintEmpty.       Stmt   ::= "print" ;

SAssg.             Stmt   ::= [Expr];
separator nonempty Expr       "=" ;
SAssgMul.          Stmt   ::= Expr "*=" Expr;
SAssgDiv.          Stmt   ::= Expr "/=" Expr;
SAssgMod.          Stmt   ::= Expr "%=" Expr;
SAssgAdd.          Stmt   ::= Expr "+=" Expr;
SAssgSub.          Stmt   ::= Expr "-=" Expr;
SAssgBShl.         Stmt   ::= Expr "<<=" Expr;
SAssgBShr.         Stmt   ::= Expr ">>=" Expr;
SAssgBAnd.         Stmt   ::= Expr "&=" Expr;
SAssgBOr.          Stmt   ::= Expr "|=" Expr;
SAssgBXor.         Stmt   ::= Expr "^=" Expr;

SIf.               Stmt   ::= "if" [Branch] Else ;
BElIf.             Branch ::= Expr "do" Block ;
separator          Branch     "elif" ;
EElse.             Else   ::= "else" "do" Block ;
EEmpty.            Else   ::= ;

SWhile.            Stmt   ::= "while" Expr "do" Block ;
SUntil.            Stmt   ::= "until" Expr "do" Block ;
SFor.              Stmt   ::= "for" Expr "in" Expr "do" Block ;
SForStep.          Stmt   ::= "for" Expr "in" Expr "step" Expr "do" Block ;
SContinue.         Stmt   ::= "continue" ;
SBreak.            Stmt   ::= "break" ;


-- expressions --

EStub.             Expr13 ::= "_" ;
EInt.              Expr13 ::= Integer ;
EFloat.            Expr13 ::= Double ;
ETrue.             Expr13 ::= "true" ;
EFalse.            Expr13 ::= "false" ;
EChar.             Expr13 ::= Char ;
EString.           Expr13 ::= String ;
EArray.            Expr13 ::= "[" [Expr2] "]" ;
EArrayCpr.         Expr13 ::= "[" Expr2 [ACpr] "]" ;
CprFor.            ACpr   ::= "for" Expr "in" Expr ;
CprForStep.        ACpr   ::= "for" Expr "in" Expr "step" Expr ;
CprIf.             ACpr   ::= "if" Expr ;
separator nonempty ACpr       "" ;

EVar.              Expr13 ::= Ident ;
EIndex.            Expr13 ::= Expr13 "[" Expr "]" ;
ESlice.            Expr13 ::= Expr13 "[" [Slice] "]" ;
SliceExpr.         Slice  ::= Expr ;
SliceNone.         Slice  ::= "" ;
separator nonempty Slice      ":" ;
EAttr.             Expr13 ::= Expr13 "." Ident ;
ECall.             Expr13 ::= Expr13 "(" [CArg] ")";
APos.              CArg   ::= Expr2 ;
ANamed.            CArg   ::= Ident "=" Expr2 ;
separator          CArg       "," ;

EPow.              Expr12 ::= Expr13 "**" Expr12 ;
EMinus.            Expr12 ::= "-" Expr12;
EPlus.             Expr12 ::= "+" Expr12;
EBNot.             Expr12 ::= "~" Expr12;
EMul.              Expr11 ::= Expr11 "*" Expr12 ;
EDiv.              Expr11 ::= Expr11 "/" Expr12 ;
EMod.              Expr11 ::= Expr11 "%" Expr12 ;
EAdd.              Expr10 ::= Expr10 "+" Expr11 ;
ESub.              Expr10 ::= Expr10 "-" Expr11 ;
EBShl.             Expr9  ::= Expr9 "<<" Expr10 ;
EBShr.             Expr9  ::= Expr9 ">>" Expr10 ;
EBAnd.             Expr8  ::= Expr8 "&" Expr9 ;
EBOr.              Expr7  ::= Expr7 "|" Expr8 ;
EBXor.             Expr7  ::= Expr7 "^" Expr8 ;

ERangeIncl.        Expr6  ::= Expr7 ".." Expr7 ;
ERangeExcl.        Expr6  ::= Expr7 "..." Expr7 ;
ERangeInf.         Expr6  ::= Expr7 "..." ;

ECmp.              Expr5  ::= Cmp ;
Cmp1.              Cmp    ::= Expr6 CmpOp Expr6 ;
Cmp2.              Cmp    ::= Expr6 CmpOp Cmp ;
CmpEQ.             CmpOp  ::= "==" ;
CmpNE.             CmpOp  ::= "!=" ;
CmpLT.             CmpOp  ::= "<" ;
CmpLE.             CmpOp  ::= "<=" ;
CmpGT.             CmpOp  ::= ">" ;
CmpGE.             CmpOp  ::= ">=" ;

ENot.              Expr5  ::= "not" Expr5 ;
EAnd.              Expr4  ::= Expr5 "and" Expr4 ;
EOr.               Expr3  ::= Expr4 "or" Expr3 ;

ETuple.            Expr1  ::= [Expr3] ;

separator nonempty Expr3      "," ;
separator          Expr2      "," ;

-- when these are above separator for Expr3, strange things happen
ECond.             Expr2  ::= Expr3 "?" Expr3 ":" Expr2 ;
ELambda.           Expr2  ::= "lambda" [Ident] "->" Expr2 ;

separator          Ident      "," ;

coercions          Expr       13 ;


-- types --

internal TPtr.     Type4  ::= Type4 ;
internal TArr.     Type4  ::= Integer Type4 ;
internal TDeref.   Type4  ::= Type4 ;
TVar.              Type4  ::= Ident ;
TVoid.             Type4  ::= "Void" ;
TInt.              Type4  ::= "Int" ;
TFloat.            Type4  ::= "Float" ;
TBool.             Type4  ::= "Bool" ;
TChar.             Type4  ::= "Char" ;
TString.           Type4  ::= "String" ;
TArray.            Type3  ::= "[" Type "]" ;
TTuple.            Type2  ::= [Type3] ;
TFunc.             Type1  ::= [Type2] "->" Type1 ;
internal TFuncDef. Type1  ::= Ident [FVar] [FArg] Type Block ;
internal TFuncExt. Type1  ::= Ident [FArg] Type ;
internal TClass.   Type1  ::= Class ;
internal TModule.  Type1  ::= "" ;

separator nonempty Type3      "*" ;
separator          Type2      "," ;

coercions          Type       4 ;


-- type classes --

CAny.              Class1 ::= "Any" ;
CNum.              Class1 ::= "Num" ;

coercions          Class      1 ;


-- comments --

comment            "--" ;
comment            "{-" "-}" ;