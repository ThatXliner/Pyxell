
-- layout --

layout             "do" ;
layout stop        "elif", "else" ;
layout toplevel    ;


-- program --


Program.           Program ::= [Stmt] ;
separator          Stmt        ";" ;


-- statements --

--SFunc.             Stmt   ::= "func" Ident "(" [Arg] ")" Type ":" Block ;
--ANoDef.            Arg    ::= Type Ident ;
--ADef.              Arg    ::= Type Ident "=" Expr ;
--separator          Arg        ";" ;

SBlock.            Block   ::= "{" [Stmt] "}" ;

SSkip.             Stmt   ::= "skip" ;

SPrint.            Stmt   ::= "print" Expr ;

SAssg.             Stmt   ::= [Expr];
separator nonempty Expr       "=" ;

SIf.               Stmt   ::= "if" [Branch] Else ;
BElIf.             Branch ::= Expr "do" Block ;
separator          Branch     "elif" ;
EElse.             Else   ::= "else" "do" Block ;
EEmpty.            Else   ::= ;

SWhile.            Stmt   ::= "while" Expr "do" Block ;


-- expressions --

EInt.              Expr8  ::= Integer ;
ETrue.             Expr8  ::= "true" ;
EFalse.            Expr8  ::= "false" ;
EString.           Expr8  ::= String ;
EVar.              Expr8  ::= Ident ;

EElem.             Expr8  ::= Expr8 "." Integer ;

--ECall.             Expr8  ::= Expr8 "(" [Expr8] ")";
--separator          Expr8      "," ;

EMul.              Expr7  ::= Expr7 "*" Expr8 ;
EDiv.              Expr7  ::= Expr7 "/" Expr8 ;
EMod.              Expr7  ::= Expr7 "%" Expr8 ;
EAdd.              Expr6  ::= Expr6 "+" Expr7 ;
ESub.              Expr6  ::= Expr6 "-" Expr7 ;
ENeg.              Expr6  ::= "-" Expr7;

ECmp.              Expr5  ::= Cmp ;
Cmp1.              Cmp    ::= Expr6 CmpOp Expr6 ;
Cmp2.              Cmp    ::= Expr6 CmpOp Cmp ;
CmpEQ.             CmpOp  ::= "==" ;
CmpNE.             CmpOp  ::= "<>" ;
CmpLT.             CmpOp  ::= "<" ;
CmpLE.             CmpOp  ::= "<=" ;
CmpGT.             CmpOp  ::= ">" ;
CmpGE.             CmpOp  ::= ">=" ;

ENot.              Expr4  ::= "not" Expr4 ;
EAnd.              Expr3  ::= Expr4 "and" Expr3 ;
EOr.               Expr2  ::= Expr3 "or" Expr2 ;

ETuple.            Expr1  ::= [Expr2] ;
separator nonempty Expr2      "," ;

coercions          Expr       8 ;


-- types --

internal TDeref.   Type4  ::= Type4 ;
TInt.              Type4  ::= "Int" ;
TBool.             Type4  ::= "Bool" ;
TString.           Type4  ::= "String" ;
--TPower.            Type3  ::= Type4 "^" Integer ;
TTuple.            Type2  ::= [Type3] ;
separator nonempty Type3      "*" ;
--TFunc.             Type1  ::= Type2 "->" Type1 ;

coercions          Type       4 ;


-- comments --

comment            "#" ;
comment            "/*" "*/" ;